class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set hash= new HashSet();
int n= s.length();
    int max=0;
    for(int i=0;i<n;i++){
        int count=0;
        for(int j=i;j<n;j++){
            int c= s.charAt(j);
            if(!hash.contains(c)){
                hash.add(c);
                count++;
                max=Math.max(count,max);
            }
            else{
                hash.clear();
                break;
            }
        }
    }
     return max;}}
###########################################################
// Time complexity: O(2n) ~ O(n)
// Space complexity: O(n)

public int lengthOfLongestSubstring(String s) {
	Set<Character> seen = new HashSet<>();
	int left = 0, right = 0;
	int length = 0;

	while (right < s.length()) {
		char c = s.charAt(right);
		
		if (seen.contains(c)) {
			while (seen.contains(c)) {
				seen.remove(s.charAt(left));
				left++;
			}
		} else {
			seen.add(c);
			length = Math.max(length, right - left + 1);
			right++;
		}
	}

	return length;
}
#####################################################################################
// Time complexity: O(n)
// Space complexity: O(n)

public int lengthOfLongestSubstring(String s) {
	Map<Character, Integer> map = new HashMap<>();
	int left = 0, right = 0;
	int length = 0;

	while (right < s.length()) {
		char c = s.charAt(right);
		
		if (map.containsKey(c)) {
			left = Math.max(map.get(c) + 1, left); // update left pointer
		}

		map.put(c, right); // update last index in Map
		length = Math.max(length, right - left + 1);
		right++;
	}

	return length;
}
